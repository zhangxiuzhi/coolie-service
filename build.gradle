/**
 * Apply global settings to all projects
 */
buildscript {
  apply from: 'dependencies.gradle'
  repositories {
    maven {
      //then try to retrieve jars from nexus
      url nexusPublicUrl
    }
    jcenter()
  }

  dependencies {
    classpath libs.'spring-boot-gradle-plugin'
    classpath libs.'dependency-management-plugin'  //todo : not sure if it is required here
//            classpath libs.'sonarqube-gradle-plugin'
//            classpath libs.'spring-cloud-contract-gradle-plugin'
  }
}

plugins {
  id 'io.franzbecker.gradle-lombok' version '1.14'
}
lombok {
  version = '1.18.4'
}

//apply the dependencies defined in the customized plugin and then the sub projects can access them
apply from: 'dependencies.gradle'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'project-report'

/*apply following plugins in sub projects as needed*/
//  apply plugin: 'org.sonarqube'
apply plugin: "io.spring.dependency-management"
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'
//  apply plugin: 'spring-cloud-contract'

sourceCompatibility = projectInfo.sourceCompatibility
targetCompatibility = projectInfo.targetCompatibility

group = projectInfo.group
version = projectInfo.version
archivesBaseName = rootProject.name

repositories {
  maven {
    //then try to retrieve jars from nexus
    url nexusPublicUrl
  }
  jcenter()
}

dependencies {

  compile libs."canal-client"
  compile libs.'spring-boot-starter-webflux'
  compile libs.'spring-boot-starter-data-jpa'
//    compile libs.'spring-boot-starter-cache'
  compile libs.'spring-boot-starter-aop'
//  compile libs.'spring-boot-starter-data-mongodb-reactive'
  compile libs.'spring-boot-starter-data-mongodb'
//    compile libs.'spring-boot-starter-data-redis-reactive'

  testCompile libs.'spring-boot-starter-test'
  testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
}

compileJava.dependsOn(processResources)


/**
 * List all jars this project depends on
 */
task listJars(description: 'Display all dependencies.') {
  doLast {
    configurations.compile.each { File file -> println "\t" + file.name }
  }
}

/**
 * Configuration for Jacoco
 */
jacoco {
  toolVersion = "0.8.0"
}

jacocoTestReport {
  group = "Reporting"
  reports {
    xml.enabled false
    html.enabled true
    html.destination project(":").file("${buildDir}/reports/coverage")
  }
}

check.dependsOn jacocoTestReport

/**
 * The task to generate a sources jar
 */
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

/**
 * The task to generate a javadoc jar
 */
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

//in addition generate the sources and java doc jars locally
artifacts {
  archives sourcesJar
//    archives javadocJar
}

publish {
  dependsOn assemble
}

jar {
  manifest {
    attributes('Implementation-Title': rootProject.name,
       'Implementation-Version': projectInfo.version)
  }
}